
# 1 "D:\MCUProject\ZH-TYNB-V1.0\src\uart.c"

# 2 "D:\Program Files (x86)\Microchip\xc8\v1.30\include\stddef.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 13
extern int errno;

# 65 "D:\Program Files (x86)\Microchip\xc8\v1.30\include\GenericTypeDefs.h"
typedef enum _BOOL { FALSE = 0, TRUE } BOOL;


typedef enum _BIT { CLEAR = 0, SET } BIT;

# 75
typedef signed int INT;
typedef signed char INT8;
typedef signed short int INT16;
typedef signed long int INT32;



 typedef signed long long INT64;



typedef unsigned int UINT;
typedef unsigned char UINT8;
typedef unsigned short int UINT16;

# 93
typedef unsigned long int UINT32;


 typedef unsigned long long UINT64;


typedef union
{
UINT8 Val;
struct
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
} bits;
} UINT8_VAL, UINT8_BITS;

typedef union
{
UINT16 Val;
UINT8 v[2] ;
struct 
{
UINT8 LB;
UINT8 HB;
} byte;
struct 
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
 UINT8 b8:1;
 UINT8 b9:1;
 UINT8 b10:1;
 UINT8 b11:1;
 UINT8 b12:1;
 UINT8 b13:1;
 UINT8 b14:1;
 UINT8 b15:1;
} bits;
} UINT16_VAL, UINT16_BITS;

# 187
typedef union
{
UINT32 Val;
UINT16 w[2] ;
UINT8 v[4] ;
struct 
{
UINT16 LW;
UINT16 HW;
} word;
struct 
{
UINT8 LB;
UINT8 HB;
UINT8 UB;
UINT8 MB;
} byte;
struct 
{
UINT16_VAL low;
UINT16_VAL high;
}wordUnion;
struct 
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
 UINT8 b8:1;
 UINT8 b9:1;
 UINT8 b10:1;
 UINT8 b11:1;
 UINT8 b12:1;
 UINT8 b13:1;
 UINT8 b14:1;
 UINT8 b15:1;
 UINT8 b16:1;
 UINT8 b17:1;
 UINT8 b18:1;
 UINT8 b19:1;
 UINT8 b20:1;
 UINT8 b21:1;
 UINT8 b22:1;
 UINT8 b23:1;
 UINT8 b24:1;
 UINT8 b25:1;
 UINT8 b26:1;
 UINT8 b27:1;
 UINT8 b28:1;
 UINT8 b29:1;
 UINT8 b30:1;
 UINT8 b31:1;
} bits;
} UINT32_VAL;



typedef union
{
UINT64 Val;
UINT32 d[2] ;
UINT16 w[4] ;
UINT8 v[8] ;
struct 
{
UINT32 LD;
UINT32 HD;
} dword;
struct 
{
UINT16 LW;
UINT16 HW;
UINT16 UW;
UINT16 MW;
} word;
struct 
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
 UINT8 b8:1;
 UINT8 b9:1;
 UINT8 b10:1;
 UINT8 b11:1;
 UINT8 b12:1;
 UINT8 b13:1;
 UINT8 b14:1;
 UINT8 b15:1;
 UINT8 b16:1;
 UINT8 b17:1;
 UINT8 b18:1;
 UINT8 b19:1;
 UINT8 b20:1;
 UINT8 b21:1;
 UINT8 b22:1;
 UINT8 b23:1;
 UINT8 b24:1;
 UINT8 b25:1;
 UINT8 b26:1;
 UINT8 b27:1;
 UINT8 b28:1;
 UINT8 b29:1;
 UINT8 b30:1;
 UINT8 b31:1;
 UINT8 b32:1;
 UINT8 b33:1;
 UINT8 b34:1;
 UINT8 b35:1;
 UINT8 b36:1;
 UINT8 b37:1;
 UINT8 b38:1;
 UINT8 b39:1;
 UINT8 b40:1;
 UINT8 b41:1;
 UINT8 b42:1;
 UINT8 b43:1;
 UINT8 b44:1;
 UINT8 b45:1;
 UINT8 b46:1;
 UINT8 b47:1;
 UINT8 b48:1;
 UINT8 b49:1;
 UINT8 b50:1;
 UINT8 b51:1;
 UINT8 b52:1;
 UINT8 b53:1;
 UINT8 b54:1;
 UINT8 b55:1;
 UINT8 b56:1;
 UINT8 b57:1;
 UINT8 b58:1;
 UINT8 b59:1;
 UINT8 b60:1;
 UINT8 b61:1;
 UINT8 b62:1;
 UINT8 b63:1;
} bits;
} UINT64_VAL;

# 339
typedef void VOID;

typedef char CHAR8;
typedef unsigned char UCHAR8;

typedef unsigned char BYTE;
typedef unsigned short int WORD;
typedef unsigned long DWORD;


typedef unsigned long long QWORD;
typedef signed char CHAR;
typedef signed short int SHORT;
typedef signed long LONG;


typedef signed long long LONGLONG;
typedef union
{
BYTE Val;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
} bits;
} BYTE_VAL, BYTE_BITS;

typedef union
{
WORD Val;
BYTE v[2] ;
struct 
{
BYTE LB;
BYTE HB;
} byte;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
 BYTE b8:1;
 BYTE b9:1;
 BYTE b10:1;
 BYTE b11:1;
 BYTE b12:1;
 BYTE b13:1;
 BYTE b14:1;
 BYTE b15:1;
} bits;
} WORD_VAL, WORD_BITS;

typedef union
{
DWORD Val;
WORD w[2] ;
BYTE v[4] ;
struct 
{
WORD LW;
WORD HW;
} word;
struct 
{
BYTE LB;
BYTE HB;
BYTE UB;
BYTE MB;
} byte;
struct 
{
WORD_VAL low;
WORD_VAL high;
}wordUnion;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
 BYTE b8:1;
 BYTE b9:1;
 BYTE b10:1;
 BYTE b11:1;
 BYTE b12:1;
 BYTE b13:1;
 BYTE b14:1;
 BYTE b15:1;
 BYTE b16:1;
 BYTE b17:1;
 BYTE b18:1;
 BYTE b19:1;
 BYTE b20:1;
 BYTE b21:1;
 BYTE b22:1;
 BYTE b23:1;
 BYTE b24:1;
 BYTE b25:1;
 BYTE b26:1;
 BYTE b27:1;
 BYTE b28:1;
 BYTE b29:1;
 BYTE b30:1;
 BYTE b31:1;
} bits;
} DWORD_VAL;


typedef union
{
QWORD Val;
DWORD d[2] ;
WORD w[4] ;
BYTE v[8] ;
struct 
{
DWORD LD;
DWORD HD;
} dword;
struct 
{
WORD LW;
WORD HW;
WORD UW;
WORD MW;
} word;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
 BYTE b8:1;
 BYTE b9:1;
 BYTE b10:1;
 BYTE b11:1;
 BYTE b12:1;
 BYTE b13:1;
 BYTE b14:1;
 BYTE b15:1;
 BYTE b16:1;
 BYTE b17:1;
 BYTE b18:1;
 BYTE b19:1;
 BYTE b20:1;
 BYTE b21:1;
 BYTE b22:1;
 BYTE b23:1;
 BYTE b24:1;
 BYTE b25:1;
 BYTE b26:1;
 BYTE b27:1;
 BYTE b28:1;
 BYTE b29:1;
 BYTE b30:1;
 BYTE b31:1;
 BYTE b32:1;
 BYTE b33:1;
 BYTE b34:1;
 BYTE b35:1;
 BYTE b36:1;
 BYTE b37:1;
 BYTE b38:1;
 BYTE b39:1;
 BYTE b40:1;
 BYTE b41:1;
 BYTE b42:1;
 BYTE b43:1;
 BYTE b44:1;
 BYTE b45:1;
 BYTE b46:1;
 BYTE b47:1;
 BYTE b48:1;
 BYTE b49:1;
 BYTE b50:1;
 BYTE b51:1;
 BYTE b52:1;
 BYTE b53:1;
 BYTE b54:1;
 BYTE b55:1;
 BYTE b56:1;
 BYTE b57:1;
 BYTE b58:1;
 BYTE b59:1;
 BYTE b60:1;
 BYTE b61:1;
 BYTE b62:1;
 BYTE b63:1;
} bits;
} QWORD_VAL;

# 7 "D:\Program Files (x86)\Microchip\xc8\v1.30\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 23 "D:\Program Files (x86)\Microchip\xc8\v1.30\include\stdio.h"
extern int errno;

# 54
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "D:\Program Files (x86)\Microchip\xc8\v1.30\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 99 "D:\Program Files (x86)\Microchip\xc8\v1.30\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 191
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern int vprintf(const char *, va_list);
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap);
extern int vsscanf(const char *, const char *, va_list);

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 22 "D:\Program Files (x86)\Microchip\xc8\v1.30\include\string.h"
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 35
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 17 "D:\MCUProject\ZH-TYNB-V1.0\include\delay.h"
extern void delay_1us(void);

extern void delay_ms(WORD count);

# 12 "D:\MCUProject\ZH-TYNB-V1.0\include\interrupt.h"
extern void init_interrupt(void);



extern unsigned char open_discharge_time;
extern unsigned int ms_cnt;
extern unsigned int se_cnt;
extern unsigned int mi_cnt;
extern unsigned int ho_cnt;

extern unsigned char open_an0_time;
extern unsigned int an0_time_count;
extern unsigned char handle_an0_process_flag;


extern unsigned char open_an1_time;
extern unsigned int an1_time_count;
extern unsigned char handle_an1_process_flag;


extern unsigned char open_an2_time;
extern unsigned int an2_time_count;
extern unsigned char handle_an2_process_flag;


extern unsigned char open_an3_time;
extern unsigned int an3_time_count;
extern unsigned char handle_an3_process_flag;


extern unsigned char open_an4_time;
extern unsigned int an4_time_count;
extern unsigned char handle_an4_process_flag;


extern unsigned char open_an9_time;
extern unsigned int an9_time_count;
extern unsigned char handle_an9_process_flag;


extern unsigned char open_an10_time;
extern unsigned int an10_time_count;
extern unsigned char handle_an10_process_flag;


extern unsigned char handle_short_flag;

# 43 "D:\MCUProject\ZH-TYNB-V1.0\include\led.h"
extern void init_led(void);

# 15 "D:\MCUProject\ZH-TYNB-V1.0\include\timer.h"
extern void init_timer1(void);

# 24 "D:\MCUProject\ZH-TYNB-V1.0\include\uart.h"
extern void init_uart1(void);

extern void uart1_send_byte(BYTE data);

extern void uart1_send_nbyte(BYTE *data,DWORD size);

extern BYTE uart1_read_byte(void);

extern void uart1_read_nbyte(BYTE *buffer,BYTE length);

extern bit handle_even_check(unsigned char databyte);

extern void handle_uart_rx_buf(void);

# 44
extern unsigned char uart1_rx_buf[80];

extern unsigned char uart1_tx_buf[80];




extern unsigned char uart1_time_count;

extern unsigned char uart1_receive_byte_count;

extern BOOL uart1_receive_flag;

extern unsigned char uart1_rx_control_flag;


extern unsigned char uart_send_delay_timer;
extern unsigned char uart_send_end_flag;
extern unsigned char uart_send_byte_count;
extern unsigned char*uart_send_point;

extern unsigned char rx_frame_kind;
extern unsigned char tx_frame_kind;

# 57 "D:\MCUProject\ZH-TYNB-V1.0\include\adc.h"
extern unsigned int mcu_value;

extern unsigned int temperature_value;

extern unsigned int pv_voltage_value;

extern unsigned int battery_voltage_value;

extern unsigned int load_voltage_value;

extern unsigned int charge_current_value;

extern unsigned int discharge_current_value;


extern unsigned int adc_buffer[64];

# 79
extern void init_adc(void);

# 29 "D:\MCUProject\ZH-TYNB-V1.0\include\pwm.h"
extern unsigned int pwm_duty_value;

extern unsigned int bost_pwm_value;

extern unsigned int buck_pwm_value;


extern long int P_prev;

extern long int P_last;

# 44
extern void init_pwm(void);

extern void Enable_Buck_Pwm(void);

extern void Disable_Buck_Pwm(void);

extern void Set_Buck_Pwm_Duty(unsigned int duty);

extern void Enable_Bost_Pwm(void);

extern void Disable_Bost_Pwm(void);

extern void Set_Bost_Pwm_Duty(unsigned int dduty);

# 37 "D:\MCUProject\ZH-TYNB-V1.0\include\task.h"
extern unsigned char buf[50];

extern unsigned char system_status;

extern unsigned char system_check_time;

extern unsigned int system_time_count;

extern unsigned char work_mode;

extern unsigned char pv_voltage_status;

extern unsigned char battery_voltage_status;

extern unsigned char load_voltage_status;

extern unsigned char discharge_index;

extern unsigned char charge_index;

extern unsigned char nop_index;

extern unsigned int involid_time_count;

extern unsigned int cv_level_time_count;

extern unsigned int load_short_time_count;

extern unsigned int load_open_time_count;

extern unsigned int over_load_time_count;

extern unsigned int battery_low_time_count;




extern unsigned long int night_time_count;

extern unsigned long int day_time_count;

extern unsigned long int pv_time_count;

extern unsigned long int light_time_level;

extern unsigned int pv_prev;

extern unsigned int I_prev;


extern float PWM;

extern float PWM_I;

extern float bt_prev;

extern unsigned char mppt_status;

extern unsigned int mppt_time_count;

extern unsigned char temper_time_count;

extern unsigned char over_temper_time_count;

extern unsigned char sys_temper_flag;



extern unsigned char charge_led_status;

extern unsigned char bt_led_status;

extern unsigned char discharge_led_status;

extern unsigned char bt_time_count;

extern unsigned char pv_index;

extern unsigned char Adjust_Pout_Flag;

extern unsigned char limit_power_pid_flag;



extern unsigned char mcu_t00_time_count;
extern unsigned char mcu_t01_time_count;
extern unsigned char mcu_t02_time_count;
extern unsigned char mcu_t03_time_count;
extern unsigned char mcu_temp_index;

extern unsigned char pid_index;



extern void handle_ad_loop(void);

extern void handle_task_process(void);

extern unsigned int start_ad_convert(unsigned char ch);

extern void Mppt_Charge(void);

extern void CC_CV_Charge(void);

# 14 "D:\MCUProject\ZH-TYNB-V1.0\include\PID.h"
typedef struct PID_VAR{

float SetPoint;
float Proportion;
float Integral;
float Derivative;
float LastError;
float PrevError;
float SumError;
} PID;




extern PID PID_CC_charge;

extern PID PID_CV_charge;

extern PID PID_CC_discharge;

extern void pid_init (PID *pp);

extern float pid_calc( PID *pp, int NowPoint );

# 21 "D:\MCUProject\ZH-TYNB-V1.0\include\Modbus.h"
extern unsigned int crc_data;




extern unsigned int crc16(volatile unsigned char *puchMsg, unsigned char usDataLen);

# 6 "D:\MCUProject\ZH-TYNB-V1.0\include\ird_remote.h"
extern float charge_r_value;

extern float discharge_r_value;


extern float p_v;

extern float b_v;

extern float load_v;

extern float charge_I ;

extern float load_I ;

extern unsigned char sys_mode;

extern unsigned char today_index;

extern float bt_00_hv;
extern float bt_00_lv;

extern float bt_01_hv;
extern float bt_01_lv;

extern float bt_02_hv;
extern float bt_02_lv;

extern float bt_03_hv;
extern float bt_03_lv;

extern float bt_04_hv;
extern float bt_04_lv;

extern float bt_05_hv;
extern float bt_05_lv;

extern float bt_06_hv;
extern float bt_06_lv;

extern float bt_07_hv;
extern float bt_07_lv;



extern float light_pv;

extern float load_cc_I;

extern float load_percent;

extern float step_01_load_percent;

extern float step_02_load_percent;

extern float step_03_load_percent;

extern float step_04_load_percent;

extern float step_05_load_percent;

extern unsigned int step_01_time_limit;

extern unsigned int step_02_time_limit;

extern unsigned int step_03_time_limit;

extern unsigned int step_04_time_limit;

extern unsigned int step_05_time_limit;

extern unsigned char volt_id;

extern unsigned char bt_id;

extern unsigned int light_time;

extern float bt_volt_100 ;

extern float bt_volt_80 ;

extern float bt_volt_60 ;

extern float bt_volt_40 ;

extern float bt_volt_20 ;

extern float bt_volt_00 ;


extern float dianchi_guoya_baohu;

extern float dianchi_guoya_huifu;

extern float dianchi_qianya_baohu;

extern float dianchi_qianya_huifu;

extern float dianchi_diya_level;

extern float dianchi_cv_level;

extern float charge_i_limit;

extern float shuchu_shortout_voltage;

extern float shuchu_open_voltage;

extern float discharge_i_baohu;

extern float discharge_i_limit;

extern float light_on_pv_level;

extern float light_off_pv_level;


float Load_Pmax;

# 132
extern void auto_system(void);

extern void read_param_eeprom(void);

# 33 "D:\MCUProject\ZH-TYNB-V1.0\src\uart.c"
unsigned char uart1_rx_buf[80];

unsigned char uart1_tx_buf[80];

# 41
unsigned char uart1_time_count=0x00;

unsigned char uart1_receive_byte_count=0;

BOOL uart1_receive_flag=FALSE;

unsigned char uart1_rx_control_flag=0x00;


unsigned char uart_send_delay_timer=0x00;

unsigned char uart_send_end_flag=0x00;

unsigned char uart_send_byte_count=0x00;

unsigned char*uart_send_point=(0);


unsigned char rx_frame_kind=0x00;

unsigned char tx_frame_kind=0x00;

# 81
void init_uart1(void)
{

SP1BRGL = 0x40;
SP1BRGH = 0x03;
BAUDCON = 0x08;

# 96
(TRISCbits.TRISC6) = 0x00;
(TRISCbits.TRISC7) = 0x01;
TXSTA = 0x20;

# 107
RCSTA = 0x90;
RCIE = 0x01;
}

# 117
void uart1_send_byte(BYTE data)
{
while (!TXSTAbits.TRMT);


CCPR5L=(unsigned char)(0x114>>2);
CCP5CONbits.DC5B=(unsigned char)(0x114&0b11);
TMR2ON=1;
TRISAbits.TRISA4=0;


TXREG = data;

while (!TXSTAbits.TRMT);


CCPR5L=(unsigned char)(0x00>>2);
CCP5CONbits.DC5B=(unsigned char)(0x00&0b11);
TMR2ON=0;
TRISAbits.TRISA4=1;

}

# 147
void uart1_send_nbyte(BYTE *data,DWORD size)
{
while (size)
{
uart1_send_byte(*data);
data++;
size--;
}
}

# 163
BYTE uart1_read_byte(void)
{
BYTE data;

while (!PIR1bits.RCIF);
data = RCREG;

return data;
}

# 179
void uart1_read_nbyte(BYTE *buffer,BYTE length)
{
BYTE i;
BYTE data;

for (i = 0; i < length; i++)
{
data = uart1_read_byte();
*buffer = data;
buffer++;
}
}

# 203
bit handle_even_check(unsigned char databyte)
{
unsigned char i=0;

unsigned char num=0;

num=0x00;

for(i=0;i<8;i++)
{
if(databyte&(1<<i))
{
num++;
}
}

return ((bit)(num%2));


}

# 232
void handle_uart_rx_buf(void)
{
unsigned char i=0;

unsigned int crc_in;

unsigned char byte_h,byte_l;

switch(rx_frame_kind)
{
case 0x01:
if(uart1_rx_buf[1]==0xA1)
{
crc_in=crc16(&uart1_rx_buf[1],1);

if(crc_in==( (uart1_rx_buf[2]<<8) | uart1_rx_buf[3]) )
{

p_v=(float)(((float)pv_voltage_value)/10)*69;

b_v=(float)(((float)battery_voltage_value)/10)*34;

load_v=(float)(((float)load_voltage_value)/10)*69;

charge_I=((float)charge_current_value)/0.30;

load_I=((float)discharge_current_value)/0.75;

sys_mode=(volt_id<<4)|system_status;



uart1_tx_buf[0]=0x55;

uart1_tx_buf[1]=0xB1;

uart1_tx_buf[2]=(unsigned char )(p_v/256);
uart1_tx_buf[3]=(unsigned char )p_v;

uart1_tx_buf[4]=(unsigned char )(b_v/256);
uart1_tx_buf[5]=(unsigned char )b_v;

uart1_tx_buf[6]=(unsigned char )(load_v/256);
uart1_tx_buf[7]=(unsigned char )load_v;

uart1_tx_buf[8]=(unsigned char )(charge_I/256);
uart1_tx_buf[9]=(unsigned char )charge_I;

uart1_tx_buf[10]=(unsigned char )(load_I/256);
uart1_tx_buf[11]=(unsigned char )load_I;

uart1_tx_buf[12]=(unsigned char )sys_mode;

uart1_tx_buf[13]=(unsigned char )(mcu_value/256);

uart1_tx_buf[14]=(unsigned char )(mcu_value);

uart1_tx_buf[15]=(unsigned char )(discharge_current_value/256);

uart1_tx_buf[16]=(unsigned char )(discharge_current_value);

uart1_tx_buf[17]=(unsigned char )(temperature_value/256);

uart1_tx_buf[18]=(unsigned char )(temperature_value);


uart1_tx_buf[19]=eeprom_read(0x12+4*( (today_index+8-0)%8 )+0 );

uart1_tx_buf[20]=eeprom_read(0x12+4*( (today_index+8-0)%8 )+1 );

uart1_tx_buf[21]=eeprom_read(0x12+4*( (today_index+8-0)%8 )+2 );

uart1_tx_buf[22]=eeprom_read(0x12+4*( (today_index+8-0)%8 )+3 );


uart1_tx_buf[23]=eeprom_read(0x12+4*( (today_index+8-1)%8 )+0 );

uart1_tx_buf[24]=eeprom_read(0x12+4*( (today_index+8-1)%8 )+1 );

uart1_tx_buf[25]=eeprom_read(0x12+4*( (today_index+8-1)%8 )+2 );

uart1_tx_buf[26]=eeprom_read(0x12+4*( (today_index+8-1)%8 )+3 );


uart1_tx_buf[27]=eeprom_read(0x12+4*( (today_index+8-2)%8 )+0 );

uart1_tx_buf[28]=eeprom_read(0x12+4*( (today_index+8-2)%8 )+1 );

uart1_tx_buf[29]=eeprom_read(0x12+4*( (today_index+8-2)%8 )+2 );

uart1_tx_buf[30]=eeprom_read(0x12+4*( (today_index+8-2)%8 )+3 );


uart1_tx_buf[31]=eeprom_read(0x12+4*( (today_index+8-3)%8 )+0 );

uart1_tx_buf[32]=eeprom_read(0x12+4*( (today_index+8-3)%8 )+1 );

uart1_tx_buf[33]=eeprom_read(0x12+4*( (today_index+8-3)%8 )+2 );

uart1_tx_buf[34]=eeprom_read(0x12+4*( (today_index+8-3)%8 )+3 );


uart1_tx_buf[35]=eeprom_read(0x12+4*( (today_index+8-4)%8 )+0 );

uart1_tx_buf[36]=eeprom_read(0x12+4*( (today_index+8-4)%8 )+1 );

uart1_tx_buf[37]=eeprom_read(0x12+4*( (today_index+8-4)%8 )+2 );

uart1_tx_buf[38]=eeprom_read(0x12+4*( (today_index+8-4)%8 )+3 );


uart1_tx_buf[39]=eeprom_read(0x12+4*( (today_index+8-5)%8 )+0 );

uart1_tx_buf[40]=eeprom_read(0x12+4*( (today_index+8-5)%8 )+1 );

uart1_tx_buf[41]=eeprom_read(0x12+4*( (today_index+8-5)%8 )+2 );

uart1_tx_buf[42]=eeprom_read(0x12+4*( (today_index+8-5)%8 )+3 );


uart1_tx_buf[43]=eeprom_read(0x12+4*( (today_index+8-6)%8 )+0 );

uart1_tx_buf[44]=eeprom_read(0x12+4*( (today_index+8-6)%8 )+1 );

uart1_tx_buf[45]=eeprom_read(0x12+4*( (today_index+8-6)%8 )+2 );

uart1_tx_buf[46]=eeprom_read(0x12+4*( (today_index+8-6)%8 )+3 );


uart1_tx_buf[47]=eeprom_read(0x12+4*( (today_index+8-7)%8 )+0 );

uart1_tx_buf[48]=eeprom_read(0x12+4*( (today_index+8-7)%8 )+1 );

uart1_tx_buf[49]=eeprom_read(0x12+4*( (today_index+8-7)%8 )+2 );

uart1_tx_buf[50]=eeprom_read(0x12+4*( (today_index+8-7)%8 )+3 );


crc_data=crc16(&uart1_tx_buf[1],50);

uart1_tx_buf[51]=crc_data/256;
uart1_tx_buf[52]=crc_data%256;

uart1_tx_buf[53]=0xAA;

uart1_send_nbyte(uart1_tx_buf,54);

}
}
break;

case 0x02:
if(uart1_rx_buf[1]==0xA2)
{
crc_in=crc16(&uart1_rx_buf[1],1);

if(crc_in==( (uart1_rx_buf[2]<<8) | uart1_rx_buf[3]) )
{


uart1_tx_buf[0]=0x55;

uart1_tx_buf[1]=0xB2;

uart1_tx_buf[2] =(unsigned char )(light_pv/256);

uart1_tx_buf[3] =(unsigned char )light_pv;

uart1_tx_buf[4] =(unsigned char )(load_cc_I/256);

uart1_tx_buf[5] =(unsigned char )load_cc_I;

uart1_tx_buf[6] =(unsigned char )(step_01_load_percent);

uart1_tx_buf[7] =(unsigned char )(step_02_load_percent);

uart1_tx_buf[8] =(unsigned char )(step_03_load_percent);

uart1_tx_buf[9] =(unsigned char )(step_04_load_percent);

uart1_tx_buf[10]=(unsigned char )(step_05_load_percent);

uart1_tx_buf[11]=(unsigned char )(bt_id);

uart1_tx_buf[12]=(unsigned char )(light_time);

uart1_tx_buf[13] =(unsigned char )(step_01_time_limit);

uart1_tx_buf[14] =(unsigned char )(step_02_time_limit);

uart1_tx_buf[15] =(unsigned char )(step_03_time_limit);

uart1_tx_buf[16] =(unsigned char )(step_04_time_limit);

uart1_tx_buf[17] =(unsigned char )(step_05_time_limit);


crc_data=crc16(&uart1_tx_buf[1],17);

uart1_tx_buf[18]=crc_data/256;

uart1_tx_buf[19]=crc_data%256;

uart1_tx_buf[20]=0xAA;

uart1_send_nbyte(uart1_tx_buf,21);
}
}
break;

case 0x03:
if(uart1_rx_buf[1]==0xA3)
{
crc_in=crc16(&uart1_rx_buf[1],17);

if(crc_in==( (uart1_rx_buf[18]<<8) | uart1_rx_buf[19]) )
{

light_pv = (uart1_rx_buf[2]<<8) | uart1_rx_buf[3];

load_cc_I = (uart1_rx_buf[4]<<8) | uart1_rx_buf[5];

step_01_load_percent = uart1_rx_buf[6];

step_02_load_percent = uart1_rx_buf[7];

step_03_load_percent = uart1_rx_buf[8];

step_04_load_percent = uart1_rx_buf[9];

step_05_load_percent = uart1_rx_buf[10];

Adjust_Pout_Flag=0x00;

bt_id = uart1_rx_buf[11];

light_time = uart1_rx_buf[12];

step_01_time_limit = uart1_rx_buf[13];

step_02_time_limit = uart1_rx_buf[14];

step_03_time_limit = uart1_rx_buf[15];

step_04_time_limit = uart1_rx_buf[16];

step_05_time_limit = uart1_rx_buf[17];

if((light_pv>=100)&&(light_pv<=1200)&&(load_cc_I<=300)&&(step_01_load_percent<=100)&&(step_02_load_percent<=100) &&(step_03_load_percent<=100)&&(step_04_load_percent<=100)&&(step_05_load_percent<=100)&&(bt_id>=1)&&(bt_id<=2) &&(light_time<=60)&&(step_01_time_limit<=24)&&(step_02_time_limit<=24)&&(step_03_time_limit<=24)&&(step_04_time_limit<=24)&&(step_05_time_limit<=24))

# 483
{

eeprom_write(0x00,(unsigned char)(light_pv/256));

eeprom_write(0x01,(unsigned char)light_pv);


eeprom_write(0x02,(unsigned char)(load_cc_I/256));

eeprom_write(0x03,(unsigned char)load_cc_I);


eeprom_write(0x04,(unsigned char)(step_01_load_percent));

eeprom_write(0x05,(unsigned char)(step_02_load_percent));

eeprom_write(0x06,(unsigned char)(step_03_load_percent));

eeprom_write(0x07,(unsigned char)(step_04_load_percent));

eeprom_write(0x08,(unsigned char)(step_05_load_percent));

eeprom_write(0x0a,(unsigned char)(bt_id));

eeprom_write(0x0b,(unsigned char)(light_time));

eeprom_write(0x0c,(unsigned char)(step_01_time_limit));

eeprom_write(0x0d,(unsigned char)(step_02_time_limit));

eeprom_write(0x0e,(unsigned char)(step_03_time_limit));

eeprom_write(0x0f,(unsigned char)(step_04_time_limit));

eeprom_write(0x10,(unsigned char)(step_05_time_limit));


light_on_pv_level = (light_pv*10)/69;

light_off_pv_level = ((light_pv*10)/69)+30;

PID_CC_discharge.SetPoint = (load_cc_I/100)*75;

if(light_time==0x00)
{
light_time_level = 1000;
}
else
{
light_time_level = (unsigned long int)(light_time*60*180);
}



uart1_tx_buf[0]=0x55;

uart1_tx_buf[1]=0xB3;

uart1_tx_buf[2]=0x01;

crc_data=crc16(&uart1_tx_buf[1],2);

uart1_tx_buf[3]=crc_data/256;

uart1_tx_buf[4]=crc_data%256;

uart1_tx_buf[5]=0xAA;

uart1_send_nbyte(uart1_tx_buf,6);
}
else
{
uart1_tx_buf[0]=0x55;

uart1_tx_buf[1]=0xB3;

uart1_tx_buf[2]=0x02;

crc_data=crc16(&uart1_tx_buf[1],2);

uart1_tx_buf[3]=crc_data/256;

uart1_tx_buf[4]=crc_data%256;

uart1_tx_buf[5]=0xAA;

uart1_send_nbyte(uart1_tx_buf,6);

RESET();
}



}
}
break;
case 0x04:
work_mode=0x01;

uart1_tx_buf[0]=0x55;

uart1_tx_buf[1]=0xB4;

uart1_tx_buf[2]=0x01;

crc_data=crc16(&uart1_tx_buf[1],2);

uart1_tx_buf[3]=crc_data/256;

uart1_tx_buf[4]=crc_data%256;

uart1_tx_buf[5]=0xAA;

uart1_send_nbyte(uart1_tx_buf,6);
break;

case 0x05:
work_mode=0x02;

uart1_tx_buf[0]=0x55;

uart1_tx_buf[1]=0xB5;

uart1_tx_buf[2]=0x01;

crc_data=crc16(&uart1_tx_buf[1],2);

uart1_tx_buf[3]=crc_data/256;

uart1_tx_buf[4]=crc_data%256;

uart1_tx_buf[5]=0xAA;

uart1_send_nbyte(uart1_tx_buf,6);
break;
case 0x06:
work_mode=0x00;

uart1_tx_buf[0]=0x55;

uart1_tx_buf[1]=0xB6;

uart1_tx_buf[2]=0x01;

crc_data=crc16(&uart1_tx_buf[1],2);

uart1_tx_buf[3]=crc_data/256;

uart1_tx_buf[4]=crc_data%256;

uart1_tx_buf[5]=0xAA;

uart1_send_nbyte(uart1_tx_buf,6);
break;
default:break;
}

rx_frame_kind=0x00;

memset (uart1_rx_buf,0,sizeof(uart1_rx_buf));
}
