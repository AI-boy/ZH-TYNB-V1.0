
# 1 "D:\MCUProject\ZH-TYNB-V1.0\src\task.c"

# 2 "D:\Program Files (x86)\Microchip\xc8\v1.30\include\stddef.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 13
extern int errno;

# 65 "D:\Program Files (x86)\Microchip\xc8\v1.30\include\GenericTypeDefs.h"
typedef enum _BOOL { FALSE = 0, TRUE } BOOL;


typedef enum _BIT { CLEAR = 0, SET } BIT;

# 75
typedef signed int INT;
typedef signed char INT8;
typedef signed short int INT16;
typedef signed long int INT32;



 typedef signed long long INT64;



typedef unsigned int UINT;
typedef unsigned char UINT8;
typedef unsigned short int UINT16;

# 93
typedef unsigned long int UINT32;


 typedef unsigned long long UINT64;


typedef union
{
UINT8 Val;
struct
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
} bits;
} UINT8_VAL, UINT8_BITS;

typedef union
{
UINT16 Val;
UINT8 v[2] ;
struct 
{
UINT8 LB;
UINT8 HB;
} byte;
struct 
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
 UINT8 b8:1;
 UINT8 b9:1;
 UINT8 b10:1;
 UINT8 b11:1;
 UINT8 b12:1;
 UINT8 b13:1;
 UINT8 b14:1;
 UINT8 b15:1;
} bits;
} UINT16_VAL, UINT16_BITS;

# 187
typedef union
{
UINT32 Val;
UINT16 w[2] ;
UINT8 v[4] ;
struct 
{
UINT16 LW;
UINT16 HW;
} word;
struct 
{
UINT8 LB;
UINT8 HB;
UINT8 UB;
UINT8 MB;
} byte;
struct 
{
UINT16_VAL low;
UINT16_VAL high;
}wordUnion;
struct 
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
 UINT8 b8:1;
 UINT8 b9:1;
 UINT8 b10:1;
 UINT8 b11:1;
 UINT8 b12:1;
 UINT8 b13:1;
 UINT8 b14:1;
 UINT8 b15:1;
 UINT8 b16:1;
 UINT8 b17:1;
 UINT8 b18:1;
 UINT8 b19:1;
 UINT8 b20:1;
 UINT8 b21:1;
 UINT8 b22:1;
 UINT8 b23:1;
 UINT8 b24:1;
 UINT8 b25:1;
 UINT8 b26:1;
 UINT8 b27:1;
 UINT8 b28:1;
 UINT8 b29:1;
 UINT8 b30:1;
 UINT8 b31:1;
} bits;
} UINT32_VAL;



typedef union
{
UINT64 Val;
UINT32 d[2] ;
UINT16 w[4] ;
UINT8 v[8] ;
struct 
{
UINT32 LD;
UINT32 HD;
} dword;
struct 
{
UINT16 LW;
UINT16 HW;
UINT16 UW;
UINT16 MW;
} word;
struct 
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
 UINT8 b8:1;
 UINT8 b9:1;
 UINT8 b10:1;
 UINT8 b11:1;
 UINT8 b12:1;
 UINT8 b13:1;
 UINT8 b14:1;
 UINT8 b15:1;
 UINT8 b16:1;
 UINT8 b17:1;
 UINT8 b18:1;
 UINT8 b19:1;
 UINT8 b20:1;
 UINT8 b21:1;
 UINT8 b22:1;
 UINT8 b23:1;
 UINT8 b24:1;
 UINT8 b25:1;
 UINT8 b26:1;
 UINT8 b27:1;
 UINT8 b28:1;
 UINT8 b29:1;
 UINT8 b30:1;
 UINT8 b31:1;
 UINT8 b32:1;
 UINT8 b33:1;
 UINT8 b34:1;
 UINT8 b35:1;
 UINT8 b36:1;
 UINT8 b37:1;
 UINT8 b38:1;
 UINT8 b39:1;
 UINT8 b40:1;
 UINT8 b41:1;
 UINT8 b42:1;
 UINT8 b43:1;
 UINT8 b44:1;
 UINT8 b45:1;
 UINT8 b46:1;
 UINT8 b47:1;
 UINT8 b48:1;
 UINT8 b49:1;
 UINT8 b50:1;
 UINT8 b51:1;
 UINT8 b52:1;
 UINT8 b53:1;
 UINT8 b54:1;
 UINT8 b55:1;
 UINT8 b56:1;
 UINT8 b57:1;
 UINT8 b58:1;
 UINT8 b59:1;
 UINT8 b60:1;
 UINT8 b61:1;
 UINT8 b62:1;
 UINT8 b63:1;
} bits;
} UINT64_VAL;

# 339
typedef void VOID;

typedef char CHAR8;
typedef unsigned char UCHAR8;

typedef unsigned char BYTE;
typedef unsigned short int WORD;
typedef unsigned long DWORD;


typedef unsigned long long QWORD;
typedef signed char CHAR;
typedef signed short int SHORT;
typedef signed long LONG;


typedef signed long long LONGLONG;
typedef union
{
BYTE Val;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
} bits;
} BYTE_VAL, BYTE_BITS;

typedef union
{
WORD Val;
BYTE v[2] ;
struct 
{
BYTE LB;
BYTE HB;
} byte;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
 BYTE b8:1;
 BYTE b9:1;
 BYTE b10:1;
 BYTE b11:1;
 BYTE b12:1;
 BYTE b13:1;
 BYTE b14:1;
 BYTE b15:1;
} bits;
} WORD_VAL, WORD_BITS;

typedef union
{
DWORD Val;
WORD w[2] ;
BYTE v[4] ;
struct 
{
WORD LW;
WORD HW;
} word;
struct 
{
BYTE LB;
BYTE HB;
BYTE UB;
BYTE MB;
} byte;
struct 
{
WORD_VAL low;
WORD_VAL high;
}wordUnion;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
 BYTE b8:1;
 BYTE b9:1;
 BYTE b10:1;
 BYTE b11:1;
 BYTE b12:1;
 BYTE b13:1;
 BYTE b14:1;
 BYTE b15:1;
 BYTE b16:1;
 BYTE b17:1;
 BYTE b18:1;
 BYTE b19:1;
 BYTE b20:1;
 BYTE b21:1;
 BYTE b22:1;
 BYTE b23:1;
 BYTE b24:1;
 BYTE b25:1;
 BYTE b26:1;
 BYTE b27:1;
 BYTE b28:1;
 BYTE b29:1;
 BYTE b30:1;
 BYTE b31:1;
} bits;
} DWORD_VAL;


typedef union
{
QWORD Val;
DWORD d[2] ;
WORD w[4] ;
BYTE v[8] ;
struct 
{
DWORD LD;
DWORD HD;
} dword;
struct 
{
WORD LW;
WORD HW;
WORD UW;
WORD MW;
} word;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
 BYTE b8:1;
 BYTE b9:1;
 BYTE b10:1;
 BYTE b11:1;
 BYTE b12:1;
 BYTE b13:1;
 BYTE b14:1;
 BYTE b15:1;
 BYTE b16:1;
 BYTE b17:1;
 BYTE b18:1;
 BYTE b19:1;
 BYTE b20:1;
 BYTE b21:1;
 BYTE b22:1;
 BYTE b23:1;
 BYTE b24:1;
 BYTE b25:1;
 BYTE b26:1;
 BYTE b27:1;
 BYTE b28:1;
 BYTE b29:1;
 BYTE b30:1;
 BYTE b31:1;
 BYTE b32:1;
 BYTE b33:1;
 BYTE b34:1;
 BYTE b35:1;
 BYTE b36:1;
 BYTE b37:1;
 BYTE b38:1;
 BYTE b39:1;
 BYTE b40:1;
 BYTE b41:1;
 BYTE b42:1;
 BYTE b43:1;
 BYTE b44:1;
 BYTE b45:1;
 BYTE b46:1;
 BYTE b47:1;
 BYTE b48:1;
 BYTE b49:1;
 BYTE b50:1;
 BYTE b51:1;
 BYTE b52:1;
 BYTE b53:1;
 BYTE b54:1;
 BYTE b55:1;
 BYTE b56:1;
 BYTE b57:1;
 BYTE b58:1;
 BYTE b59:1;
 BYTE b60:1;
 BYTE b61:1;
 BYTE b62:1;
 BYTE b63:1;
} bits;
} QWORD_VAL;

# 7 "D:\Program Files (x86)\Microchip\xc8\v1.30\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 23 "D:\Program Files (x86)\Microchip\xc8\v1.30\include\stdio.h"
extern int errno;

# 54
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "D:\Program Files (x86)\Microchip\xc8\v1.30\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 99 "D:\Program Files (x86)\Microchip\xc8\v1.30\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 191
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern int vprintf(const char *, va_list);
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap);
extern int vsscanf(const char *, const char *, va_list);

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 22 "D:\Program Files (x86)\Microchip\xc8\v1.30\include\string.h"
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 35
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 17 "D:\MCUProject\ZH-TYNB-V1.0\include\delay.h"
extern void delay_1us(void);

extern void delay_ms(WORD count);

# 12 "D:\MCUProject\ZH-TYNB-V1.0\include\interrupt.h"
extern void init_interrupt(void);



extern unsigned char open_discharge_time;
extern unsigned int ms_cnt;
extern unsigned int se_cnt;
extern unsigned int mi_cnt;
extern unsigned int ho_cnt;

extern unsigned char open_an0_time;
extern unsigned int an0_time_count;
extern unsigned char handle_an0_process_flag;


extern unsigned char open_an1_time;
extern unsigned int an1_time_count;
extern unsigned char handle_an1_process_flag;


extern unsigned char open_an2_time;
extern unsigned int an2_time_count;
extern unsigned char handle_an2_process_flag;


extern unsigned char open_an3_time;
extern unsigned int an3_time_count;
extern unsigned char handle_an3_process_flag;


extern unsigned char open_an4_time;
extern unsigned int an4_time_count;
extern unsigned char handle_an4_process_flag;


extern unsigned char open_an9_time;
extern unsigned int an9_time_count;
extern unsigned char handle_an9_process_flag;


extern unsigned char open_an10_time;
extern unsigned int an10_time_count;
extern unsigned char handle_an10_process_flag;


extern unsigned char handle_short_flag;

# 43 "D:\MCUProject\ZH-TYNB-V1.0\include\led.h"
extern void init_led(void);

# 15 "D:\MCUProject\ZH-TYNB-V1.0\include\timer.h"
extern void init_timer1(void);

# 24 "D:\MCUProject\ZH-TYNB-V1.0\include\uart.h"
extern void init_uart1(void);

extern void uart1_send_byte(BYTE data);

extern void uart1_send_nbyte(BYTE *data,DWORD size);

extern BYTE uart1_read_byte(void);

extern void uart1_read_nbyte(BYTE *buffer,BYTE length);

extern bit handle_even_check(unsigned char databyte);

extern void handle_uart_rx_buf(void);

# 44
extern unsigned char uart1_rx_buf[80];

extern unsigned char uart1_tx_buf[80];




extern unsigned char uart1_time_count;

extern unsigned char uart1_receive_byte_count;

extern BOOL uart1_receive_flag;

extern unsigned char uart1_rx_control_flag;


extern unsigned char uart_send_delay_timer;
extern unsigned char uart_send_end_flag;
extern unsigned char uart_send_byte_count;
extern unsigned char*uart_send_point;

extern unsigned char rx_frame_kind;
extern unsigned char tx_frame_kind;

# 57 "D:\MCUProject\ZH-TYNB-V1.0\include\adc.h"
extern unsigned int mcu_value;

extern unsigned int temperature_value;

extern unsigned int pv_voltage_value;

extern unsigned int battery_voltage_value;

extern unsigned int load_voltage_value;

extern unsigned int charge_current_value;

extern unsigned int discharge_current_value;


extern unsigned int adc_buffer[64];

# 79
extern void init_adc(void);

# 29 "D:\MCUProject\ZH-TYNB-V1.0\include\pwm.h"
extern unsigned int pwm_duty_value;

extern unsigned int bost_pwm_value;

extern unsigned int buck_pwm_value;


extern long int P_prev;

extern long int P_last;

# 44
extern void init_pwm(void);

extern void Enable_Buck_Pwm(void);

extern void Disable_Buck_Pwm(void);

extern void Set_Buck_Pwm_Duty(unsigned int duty);

extern void Enable_Bost_Pwm(void);

extern void Disable_Bost_Pwm(void);

extern void Set_Bost_Pwm_Duty(unsigned int dduty);

# 37 "D:\MCUProject\ZH-TYNB-V1.0\include\task.h"
extern unsigned char buf[50];

extern unsigned char system_status;

extern unsigned char system_check_time;

extern unsigned int system_time_count;

extern unsigned char work_mode;

extern unsigned char pv_voltage_status;

extern unsigned char battery_voltage_status;

extern unsigned char load_voltage_status;

extern unsigned char discharge_index;

extern unsigned char charge_index;

extern unsigned char nop_index;

extern unsigned int involid_time_count;

extern unsigned int cv_level_time_count;

extern unsigned int load_short_time_count;

extern unsigned int load_open_time_count;

extern unsigned int over_load_time_count;

extern unsigned int battery_low_time_count;




extern unsigned long int night_time_count;

extern unsigned long int day_time_count;

extern unsigned long int pv_time_count;

extern unsigned long int light_time_level;

extern unsigned int pv_prev;

extern unsigned int I_prev;


extern float PWM;

extern float PWM_I;

extern float bt_prev;

extern unsigned char mppt_status;

extern unsigned int mppt_time_count;

extern unsigned char temper_time_count;

extern unsigned char over_temper_time_count;

extern unsigned char sys_temper_flag;



extern unsigned char charge_led_status;

extern unsigned char bt_led_status;

extern unsigned char discharge_led_status;

extern unsigned char bt_time_count;

extern unsigned char pv_index;

extern unsigned char Adjust_Pout_Flag;

extern unsigned char limit_power_pid_flag;



extern unsigned char mcu_t00_time_count;
extern unsigned char mcu_t01_time_count;
extern unsigned char mcu_t02_time_count;
extern unsigned char mcu_t03_time_count;
extern unsigned char mcu_temp_index;

extern unsigned char pid_index;



extern void handle_ad_loop(void);

extern void handle_task_process(void);

extern unsigned int start_ad_convert(unsigned char ch);

extern void Mppt_Charge(void);

extern void CC_CV_Charge(void);

# 14 "D:\MCUProject\ZH-TYNB-V1.0\include\PID.h"
typedef struct PID_VAR{

float SetPoint;
float Proportion;
float Integral;
float Derivative;
float LastError;
float PrevError;
float SumError;
} PID;




extern PID PID_CC_charge;

extern PID PID_CV_charge;

extern PID PID_CC_discharge;

extern void pid_init (PID *pp);

extern float pid_calc( PID *pp, int NowPoint );

# 21 "D:\MCUProject\ZH-TYNB-V1.0\include\Modbus.h"
extern unsigned int crc_data;




extern unsigned int crc16(volatile unsigned char *puchMsg, unsigned char usDataLen);

# 6 "D:\MCUProject\ZH-TYNB-V1.0\include\ird_remote.h"
extern float charge_r_value;

extern float discharge_r_value;


extern float p_v;

extern float b_v;

extern float load_v;

extern float charge_I ;

extern float load_I ;

extern unsigned char sys_mode;

extern unsigned char today_index;

extern float bt_00_hv;
extern float bt_00_lv;

extern float bt_01_hv;
extern float bt_01_lv;

extern float bt_02_hv;
extern float bt_02_lv;

extern float bt_03_hv;
extern float bt_03_lv;

extern float bt_04_hv;
extern float bt_04_lv;

extern float bt_05_hv;
extern float bt_05_lv;

extern float bt_06_hv;
extern float bt_06_lv;

extern float bt_07_hv;
extern float bt_07_lv;



extern float light_pv;

extern float load_cc_I;

extern float load_percent;

extern float step_01_load_percent;

extern float step_02_load_percent;

extern float step_03_load_percent;

extern float step_04_load_percent;

extern float step_05_load_percent;

extern unsigned int step_01_time_limit;

extern unsigned int step_02_time_limit;

extern unsigned int step_03_time_limit;

extern unsigned int step_04_time_limit;

extern unsigned int step_05_time_limit;

extern unsigned char volt_id;

extern unsigned char bt_id;

extern unsigned int light_time;

extern float bt_volt_100 ;

extern float bt_volt_80 ;

extern float bt_volt_60 ;

extern float bt_volt_40 ;

extern float bt_volt_20 ;

extern float bt_volt_00 ;


extern float dianchi_guoya_baohu;

extern float dianchi_guoya_huifu;

extern float dianchi_qianya_baohu;

extern float dianchi_qianya_huifu;

extern float dianchi_diya_level;

extern float dianchi_cv_level;

extern float charge_i_limit;

extern float shuchu_shortout_voltage;

extern float shuchu_open_voltage;

extern float discharge_i_baohu;

extern float discharge_i_limit;

extern float light_on_pv_level;

extern float light_off_pv_level;


float Load_Pmax;

# 132
extern void auto_system(void);

extern void read_param_eeprom(void);

# 13 "D:\MCUProject\ZH-TYNB-V1.0\src\task.c"
unsigned char buf[50];

unsigned char system_status=0x00;

unsigned char system_check_time=0x00;

unsigned int system_time_count=0x00;

unsigned char work_mode=0x00;


unsigned char pv_voltage_status=0x00;

unsigned char battery_voltage_status=0x00;

unsigned char load_voltage_status=0x00;

unsigned char discharge_index=0x00;

unsigned char charge_index=0x00;

unsigned char nop_index=0x00;

unsigned int involid_time_count=0x00;

unsigned int cv_level_time_count=0x00;

unsigned int load_short_time_count=0x00;

unsigned int load_open_time_count=0x00;

unsigned int over_load_time_count=0x00;

unsigned int battery_low_time_count=0x00;


unsigned long int night_time_count=0x00;

unsigned long int day_time_count=0x00;

unsigned long int pv_time_count=0x00;

unsigned long int light_time_level=0x00;

unsigned int pv_prev=0x00;

unsigned int I_prev=0x00;


float PWM = 0;

float PWM_I= 0;

unsigned char mppt_status=0x00;

unsigned int mppt_time_count=0x00;

unsigned char temper_time_count=0x00;

unsigned char over_temper_time_count=0x00;

unsigned char sys_temper_flag=0x01;

unsigned char charge_led_status=0x00;

unsigned char bt_led_status=0x00;

unsigned char discharge_led_status=0x00;

unsigned char bt_time_count=0x00;

unsigned char pv_index=0x00;

unsigned char Adjust_Pout_Flag=0x00;

unsigned char limit_power_pid_flag=0x00;

unsigned char t1=0x00;
unsigned char t2=0x00;
unsigned char t3=0x00;
unsigned char t4=0x00;
unsigned char t5=0x00;

float bt_prev=0.0;

unsigned char mcu_t00_time_count=0x00;
unsigned char mcu_t01_time_count=0x00;
unsigned char mcu_t02_time_count=0x00;
unsigned char mcu_t03_time_count=0x00;
unsigned char mcu_temp_index=0x00;

unsigned char pid_index=0x00;

# 113
void handle_ad_loop(void)
{

if(handle_an0_process_flag==0x01)
{
ADCON1bits.ADPREF =0b00;

mcu_value=start_ad_convert(0b11101);

ADCON1bits.ADPREF =0b11;

if(mcu_value<490)
{
mcu_t00_time_count++;
mcu_t01_time_count=0x00;
mcu_t02_time_count=0x00;
mcu_t03_time_count=0x00;

if(mcu_t00_time_count>=120)
{
mcu_t00_time_count=0x00;

mcu_temp_index=0x00;
}
}
else if(mcu_value>510 && mcu_value<530)
{
mcu_t01_time_count++;
mcu_t00_time_count=0x00;
mcu_t02_time_count=0x00;
mcu_t03_time_count=0x00;

if(mcu_t01_time_count>=60)
{
mcu_t01_time_count=0x00;

mcu_temp_index=0x01;
}
}
else if(mcu_value>530 && mcu_value<550)
{
mcu_t02_time_count++;
mcu_t00_time_count=0x00;
mcu_t01_time_count=0x00;
mcu_t03_time_count=0x00;

if(mcu_t02_time_count>=30)
{
mcu_t02_time_count=0x00;

mcu_temp_index=0x02;
}
}
else if(mcu_value>=550)
{
mcu_t03_time_count++;
mcu_t00_time_count=0x00;
mcu_t01_time_count=0x00;
mcu_t02_time_count=0x00;

if(mcu_t03_time_count>=10)
{
mcu_t03_time_count=0x00;

mcu_temp_index=0x03;
}
}
else
{
mcu_t00_time_count=0x00;
mcu_t01_time_count=0x00;
mcu_t02_time_count=0x00;
mcu_t03_time_count=0x00;
}


handle_an0_process_flag=0x00;

}



if(handle_an1_process_flag==0x01)
{

temperature_value=start_ad_convert(0b00001);

if((temperature_value>90)&&(temperature_value<950))
{
temper_time_count++;

over_temper_time_count=0x00;

if(temper_time_count>=10)
{
temper_time_count=0x00;

sys_temper_flag=0x01;
}
}
else
{
over_temper_time_count++;

temper_time_count=0x00;

if(over_temper_time_count>=10)
{
over_temper_time_count=0x00;

sys_temper_flag=0x00;
}
}

handle_an1_process_flag=0x00;

}




if(handle_an2_process_flag==0x01)
{

pv_voltage_value=start_ad_convert(0b00010);

# 248
if(pv_index==0x00)
{
if(pv_voltage_value<=light_on_pv_level)
{
night_time_count++;

day_time_count=0x00;

if(night_time_count>light_time_level)
{
night_time_count=0x00;

pv_voltage_status=0x02;

}

}
else if((pv_voltage_value>(light_off_pv_level)))
{
day_time_count++;

night_time_count=0x00;

if(day_time_count>light_time_level)
{
day_time_count=0x00;

pv_voltage_status=0x00;

}
}
else
{
day_time_count=0x00;

night_time_count=0x00;
}
}

if((pv_voltage_value>=light_off_pv_level)&&(pv_voltage_value<1000))
{
pv_time_count++;

if(pv_time_count>light_time_level)
{
pv_time_count=0x00;

pv_voltage_status=0x01;

day_time_count=0x00;

night_time_count=0x00;

pv_index=0x01;

}

}
else if(pv_voltage_value>=1000)
{
pv_time_count=0x00;

pv_voltage_status=0x00;
}
else
{
pv_time_count=0x00;

}

if(pv_index==0x01)
{
if(pv_voltage_value<=light_on_pv_level)
{
night_time_count++;

if(night_time_count>light_time_level)
{
night_time_count=0x00;

pv_voltage_status=0x02;

pv_index=0x00;
}

}
else
{
night_time_count=0x00;
}

}



handle_an2_process_flag=0x00;

}


if(handle_an9_process_flag==0x01)
{
charge_current_value=0x00;

if(system_status == 0x01)
{
charge_current_value=start_ad_convert(0b01001);

# 364
if((charge_current_value>=charge_i_limit)&&(charge_index>=0x03))
{

if(buck_pwm_value>50)
{
buck_pwm_value = buck_pwm_value - 1;
}
Set_Buck_Pwm_Duty(buck_pwm_value);

}

}

handle_an9_process_flag=0x00;

}




if(handle_an3_process_flag==0x01)
{

battery_voltage_value=start_ad_convert(0b01100);


b_v=(float)(((float)battery_voltage_value)/10)*34;



if((battery_voltage_value<(dianchi_guoya_baohu+volt_id*5))&&(charge_index==0x00))
{
bt_time_count++;

if(bt_time_count>=100)
{
bt_time_count=0x00;

bt_led_status=0x01;

charge_index=0x01;

(LATBbits.LATB4 = 0x01);

battery_voltage_status=0x01;
}

}
else if((battery_voltage_value>=(dianchi_guoya_baohu+volt_id*5))&&(charge_index<=0x01))
{
bt_led_status=0x00;

bt_time_count=0x00;

battery_voltage_status=0x00;
}


if( (battery_voltage_value<dianchi_guoya_huifu) && (charge_index==0x02) )
{
charge_index=0x03;

charge_led_status=0x01;

(LATCbits.LATC4 = 0x01);

Enable_Buck_Pwm();

}
else if( (battery_voltage_value>=dianchi_guoya_huifu) && (charge_index==0x02) )
{
bt_00_lv = b_v;

charge_led_status=0x00;

}
else if( (battery_voltage_value<dianchi_guoya_baohu) && (charge_index>=0x03) )
{

if((charge_current_value<charge_i_limit)&&(charge_index>=0x03))
{
mppt_time_count++;

if(mppt_time_count>5)
{
mppt_time_count=0x00;

Mppt_Charge();

I_prev=charge_current_value;
}

}

involid_time_count=0x00;

}
else if( (battery_voltage_value>=dianchi_guoya_baohu) && (charge_index>=0x03) )
{
involid_time_count++;

if(involid_time_count>200)
{
involid_time_count=0x00;

if(charge_index>=0x03)
{
charge_index=0x05;

Disable_Buck_Pwm();

Set_Buck_Pwm_Duty(0);

charge_led_status=0x00;

while(1);
}
}
}



P_prev=P_last;

pv_prev=pv_voltage_value;

handle_an3_process_flag=0x00;

}

# 499
if(handle_an4_process_flag==0x01)
{
load_voltage_value=0x00;

if(system_status == 0x02)
{
load_voltage_value=start_ad_convert(0b00100);


if((load_voltage_value<shuchu_shortout_voltage)&&(discharge_index==0x02)&&(PID_CC_discharge.SetPoint>0))
{
load_short_time_count++;

if(load_short_time_count>100)
{
load_short_time_count=0x00;

bost_pwm_value=2;

Set_Bost_Pwm_Duty(bost_pwm_value);

discharge_led_status=0x00;

delay_ms(1);

Disable_Bost_Pwm();

(LATCbits.LATC3 = 0x00);

while(1);
}

}
else if((load_voltage_value>=shuchu_shortout_voltage)&&(load_voltage_value<(shuchu_shortout_voltage*2))&&(discharge_index==0x02)&&(PID_CC_discharge.SetPoint>0))
{
load_short_time_count++;

if(load_short_time_count>100)
{
load_short_time_count=0x00;

discharge_index=0x03;

bost_pwm_value=2;

Set_Bost_Pwm_Duty(bost_pwm_value);

discharge_led_status=0x00;

delay_ms(1);

Disable_Bost_Pwm();

(LATCbits.LATC3 = 0x00);

while(1);
}

}
else
{
load_short_time_count=0x00;
}


if((load_voltage_value>shuchu_open_voltage)&&(discharge_index==0x02))
{
load_open_time_count++;

if(load_open_time_count>100)
{
discharge_index=0x03;

load_open_time_count=0x00;

bost_pwm_value=5;

Set_Bost_Pwm_Duty(bost_pwm_value);

discharge_led_status=0x00;

delay_ms(1);

Disable_Bost_Pwm();

(LATCbits.LATC3 = 0x00);

while(1);
}

}
else
{
load_open_time_count=0x00;
}


}

handle_an4_process_flag=0x00;

}



if(handle_an10_process_flag==0x01)
{
discharge_current_value=0x00;

if(system_status == 0x02)
{
discharge_current_value=start_ad_convert(0b01010);

if((discharge_current_value>discharge_i_baohu)&&(discharge_index==0x02))
{
over_load_time_count++;

if(over_load_time_count>100)
{
discharge_index=0x03;

bost_pwm_value=2;

Set_Bost_Pwm_Duty(bost_pwm_value);

delay_ms(1);

Disable_Bost_Pwm();

(LATCbits.LATC3 = 0x00);

over_load_time_count=0x00;

discharge_led_status=0x00;

while(1);
}

}
else
{
over_load_time_count=0x00;
}

if((battery_voltage_value>dianchi_qianya_huifu)&&(discharge_index==0x01))
{
discharge_index=0x02;

discharge_led_status=0x01;

open_discharge_time=0x01;

(LATCbits.LATC5 = 0x01);

(LATCbits.LATC3 = 0x01);

Enable_Bost_Pwm();

}
else if((battery_voltage_value<=dianchi_qianya_huifu)&&(discharge_index==0x01))
{
discharge_led_status=0x00;

open_discharge_time=0x00;
}


if((battery_voltage_value>=dianchi_qianya_baohu)&&(discharge_index==0x02))
{

if((discharge_current_value<=discharge_i_limit)&&(discharge_index==0x02))
{


t1=step_01_time_limit;
t2=step_01_time_limit+step_02_time_limit;
t3=step_01_time_limit+step_02_time_limit+step_03_time_limit;
t4=step_01_time_limit+step_02_time_limit+step_03_time_limit+step_04_time_limit;
t5=step_01_time_limit+step_02_time_limit+step_03_time_limit+step_04_time_limit+step_05_time_limit;

if((ho_cnt<t1) && (Adjust_Pout_Flag<=0x01))
{
Adjust_Pout_Flag=0x01;
}
else if((ho_cnt>=t1) && (ho_cnt<t2) && (Adjust_Pout_Flag<=0x02))
{
Adjust_Pout_Flag=0x02;
}
else if((ho_cnt>=t2) && (ho_cnt<t3) && (Adjust_Pout_Flag<=0x03))
{
Adjust_Pout_Flag=0x03;
}
else if((ho_cnt>=t3) && (ho_cnt<t4) && (Adjust_Pout_Flag<=0x04))
{
Adjust_Pout_Flag=0x04;
}
else if((ho_cnt>=t4) && (ho_cnt<t5) && (Adjust_Pout_Flag<=0x05))
{
Adjust_Pout_Flag=0x05;
}
else
{
Adjust_Pout_Flag=0x00;
}


if( ((load_cc_I/100)*75) > (Load_Pmax*75/(load_voltage_value*69/1000)) )
{
PID_CC_discharge.SetPoint=(Load_Pmax*75)/(load_voltage_value*69/1000);

limit_power_pid_flag=0x01;

if(Adjust_Pout_Flag==0x01)
{
PID_CC_discharge.SetPoint = ((Load_Pmax*75)/(load_voltage_value*69/1000))*step_01_load_percent/100;
}
else if(Adjust_Pout_Flag==0x02)
{
PID_CC_discharge.SetPoint = ((Load_Pmax*75)/(load_voltage_value*69/1000))*step_02_load_percent/100;
}
else if(Adjust_Pout_Flag==0x03)
{
PID_CC_discharge.SetPoint = ((Load_Pmax*75)/(load_voltage_value*69/1000))*step_03_load_percent/100;
}
else if(Adjust_Pout_Flag==0x04)
{
PID_CC_discharge.SetPoint = ((Load_Pmax*75)/(load_voltage_value*69/1000))*step_04_load_percent/100;
}
else if(Adjust_Pout_Flag==0x05)
{
PID_CC_discharge.SetPoint = ((Load_Pmax*75)/(load_voltage_value*69/1000))*step_05_load_percent/100;
}
else if(Adjust_Pout_Flag==0x00)
{
PID_CC_discharge.SetPoint =0;
}

if(mcu_temp_index==0x01)
{
PID_CC_discharge.SetPoint = PID_CC_discharge.SetPoint*0.5;
}
else if(mcu_temp_index==0x02)
{
PID_CC_discharge.SetPoint = PID_CC_discharge.SetPoint*0.2;
}
else if(mcu_temp_index==0x03)
{
PID_CC_discharge.SetPoint =0;
}

}
else
{
PID_CC_discharge.SetPoint=(load_cc_I/100)*75;


if(Adjust_Pout_Flag==0x01)
{
PID_CC_discharge.SetPoint = ((load_cc_I/100)*75)*step_01_load_percent/100;
}
else if(Adjust_Pout_Flag==0x02)
{
PID_CC_discharge.SetPoint = ((load_cc_I/100)*75)*step_02_load_percent/100;
}
else if(Adjust_Pout_Flag==0x03)
{
PID_CC_discharge.SetPoint = ((load_cc_I/100)*75)*step_03_load_percent/100;
}
else if(Adjust_Pout_Flag==0x04)
{
PID_CC_discharge.SetPoint = ((load_cc_I/100)*75)*step_04_load_percent/100;
}
else if(Adjust_Pout_Flag==0x05)
{
PID_CC_discharge.SetPoint = ((load_cc_I/100)*75)*step_05_load_percent/100;
}
else if(Adjust_Pout_Flag==0x00)
{
PID_CC_discharge.SetPoint =0;
}


if(mcu_temp_index==0x01)
{
PID_CC_discharge.SetPoint = PID_CC_discharge.SetPoint*0.5;
}
else if(mcu_temp_index==0x02)
{
PID_CC_discharge.SetPoint = PID_CC_discharge.SetPoint*0.2;
}
else if(mcu_temp_index==0x03)
{
PID_CC_discharge.SetPoint =0;
}


}


pid_index = 0x01;

PWM_I=pid_calc(&PID_CC_discharge,discharge_current_value);

PWM = PWM+PWM_I;

if( PWM>=488)
{
PWM=488;
}
else if(PWM<=5)
{
PWM=5;
}

bost_pwm_value = (unsigned int)PWM;

if(PID_CC_discharge.SetPoint==0)
{
bost_pwm_value = 0;
}

Set_Bost_Pwm_Duty(bost_pwm_value);

limit_power_pid_flag=0x00;


}
else if((discharge_current_value>discharge_i_limit)&&(discharge_index==0x02))
{
if(bost_pwm_value>10)
{
bost_pwm_value = bost_pwm_value-1;
}

Set_Bost_Pwm_Duty(bost_pwm_value);
}

battery_low_time_count=0;

}
else if((battery_voltage_value<dianchi_qianya_baohu)&&(discharge_index==0x02))
{

battery_low_time_count++;

if(battery_low_time_count>1000)
{
discharge_index=0x03;

bost_pwm_value=2;

Set_Bost_Pwm_Duty(bost_pwm_value);

battery_low_time_count=0x00;

discharge_led_status=0x00;

while(1);
}

}
else
{
battery_low_time_count=0;
}

}

handle_an10_process_flag=0x00;

}


}

# 882
unsigned int start_ad_convert(unsigned char ch)
{

unsigned char i,j,k;

unsigned int ad_h,ad_l;


unsigned int temp;

unsigned char ad_ch;

ad_ch=0x00;

ad_ch=ch;

ADCON0bits.CHS =ch;

ADCON0bits.ADON =1;

if((ad_ch==0b01010)||(ad_ch==0b01001))
{
for(i=0;i<51;i++)
{
__delay_us(5);

ADCON0bits.GO=1;

while(ADCON0bits.nDONE);

ad_h=0b00000011&ADRESH;

ad_l=ADRESL;

adc_buffer[i]=(ad_h<<8)|ad_l;
}
for(j=0;j<50;j++)
{
for(i=0;i<50-j;i++)
{
if(adc_buffer[i]>adc_buffer[i+1])
{
temp=adc_buffer[i];

adc_buffer[i]=adc_buffer[i+1];

adc_buffer[i+1]=temp;
}

}
}

ADCON0bits.ADON =0;

return((adc_buffer[24]+adc_buffer[26]+
adc_buffer[22]+adc_buffer[28]+
adc_buffer[20]+adc_buffer[30]+
adc_buffer[18]+adc_buffer[32]+
adc_buffer[16]+adc_buffer[34]+
adc_buffer[14]+adc_buffer[36]+
adc_buffer[12]+adc_buffer[38]+
adc_buffer[10]+adc_buffer[40]+
adc_buffer[8]+adc_buffer[42]+
adc_buffer[6]+adc_buffer[44]+
adc_buffer[4]+adc_buffer[46]+
adc_buffer[2]+adc_buffer[48]+
adc_buffer[0]+adc_buffer[50])/26);
}



for(i=0;i<11;i++)
{
__delay_us(10);

ADCON0bits.GO=1;

while(ADCON0bits.nDONE);

ad_h=0b00000011&ADRESH;

ad_l=ADRESL;

adc_buffer[i]=(ad_h<<8)|ad_l;
}

for(j=0;j<11-1;j++)
{
for(i=0;i<11-j;i++)
{
if(adc_buffer[i]>adc_buffer[i+1])
{
temp=adc_buffer[i];

adc_buffer[i]=adc_buffer[i+1];

adc_buffer[i+1]=temp;
}

}
}

ADCON0bits.ADON =0;

return((adc_buffer[((11-1)/2)-1]+adc_buffer[((11-1)/2)+1])/2);


}

# 1000
void handle_task_process(void)
{


if(handle_short_flag==0x01)
{
over_load_time_count=0x00;

load_voltage_status=0x01;

handle_short_flag=0x00;

discharge_led_status=0x00;

while(1);
}

if(work_mode==0x00)
{
if((pv_voltage_status==0x01)&&(battery_voltage_status==0x01)&&(sys_temper_flag==0x01)&&(mcu_temp_index<0x03))
{

system_status = 0x01;

}
else if((pv_voltage_status==0x02)&&(battery_voltage_status==0x01)&&(sys_temper_flag==0x01)&&(mcu_temp_index<0x03))
{

system_status = 0x02;

}
else
{
system_status = 0x00;
}
}
else if(work_mode==0x01)
{
system_status = 0x01;
}
else if(work_mode==0x02)
{
system_status = 0x02;
}
else
{
system_status = 0x00;
}


switch(system_status)
{
case 0x00:
if(nop_index==0x00)
{
bt_led_status=0x00;

charge_led_status=0x00;

discharge_led_status=0x00;

(LATCbits.LATC4 = 0x00);

(LATCbits.LATC5 = 0x00);

(LATBbits.LATB4 = 0x00);

Disable_Buck_Pwm();

Set_Buck_Pwm_Duty(0);

Disable_Bost_Pwm();

Set_Bost_Pwm_Duty(0);

(LATCbits.LATC3 = 0x00);

P_last=0;

P_prev=0;

pv_prev=0;

buck_pwm_value=0;

bost_pwm_value=0;

PWM =50;

pid_init ( &PID_CC_charge);

pid_init ( &PID_CV_charge);

pid_init ( &PID_CC_discharge);



PID_CC_charge.Proportion = 0.001;

PID_CC_charge.Integral = 0;

PID_CC_charge.Derivative = 0;

PID_CC_charge.SetPoint = 5.0*30.0;




PID_CV_charge.Proportion = 0.001;

PID_CV_charge.Integral = 0;

PID_CV_charge.Derivative = 0;

PID_CV_charge.SetPoint = (12.44/34)*1000*volt_id;



PID_CC_discharge.Proportion = 0.001;

PID_CC_discharge.Integral = 0.;

PID_CC_discharge.Derivative = 0;

PID_CC_discharge.SetPoint = (load_cc_I/100)*75;

open_discharge_time=0x00;

ms_cnt=0x00;
se_cnt=0x00;
mi_cnt=0x00;
ho_cnt=0x00;

Adjust_Pout_Flag=0x00;

nop_index=0x01;

discharge_index=0x00;

charge_index=0x00;
}


break;

case 0x01:
if(charge_index==0x01)
{

discharge_led_status=0x01;

(LATCbits.LATC5 = 0x00);

Disable_Bost_Pwm();

Set_Bost_Pwm_Duty(0);

(LATCbits.LATC3 = 0x00);

Disable_Buck_Pwm();

PWM =50;

buck_pwm_value=50;

Set_Buck_Pwm_Duty(buck_pwm_value);

# 1183
pid_init ( &PID_CC_charge);

pid_init ( &PID_CV_charge);


PID_CC_charge.Proportion = 0.001;

PID_CC_charge.Integral = 0;

PID_CC_charge.Derivative = 0;

PID_CC_charge.SetPoint = 5.0*30.0;



PID_CV_charge.Proportion = 0.001;

PID_CV_charge.Integral = 0;

PID_CV_charge.Derivative = 0;

PID_CV_charge.SetPoint = (12.44/34)*1000*volt_id;


P_prev=0;

P_last=0;

open_discharge_time=0x00;

ms_cnt=0x00;
se_cnt=0x00;
mi_cnt=0x00;
ho_cnt=0x00;

Adjust_Pout_Flag=0x00;

nop_index=0x00;

discharge_index=0x00;

charge_index=0x02;


today_index = today_index+1;

today_index = today_index%8;

eeprom_write(0x11,(unsigned char)today_index);

bt_00_lv = b_v;

}
break;

case 0x02:

if(discharge_index==0)
{

charge_led_status=0x01;

(LATCbits.LATC4 = 0x00);

Disable_Buck_Pwm();

Set_Buck_Pwm_Duty(0);

(LATCbits.LATC3 = 0x00);

Disable_Bost_Pwm();

PWM =50;

bost_pwm_value=50;

Set_Bost_Pwm_Duty(bost_pwm_value);

# 1281
pid_init ( &PID_CC_discharge);


PID_CC_discharge.Proportion = 0.001;

PID_CC_discharge.Integral = 0;

PID_CC_discharge.Derivative = 0;

PID_CC_discharge.SetPoint = (load_cc_I/100)*75;

open_discharge_time=0x00;

ms_cnt=0x00;
se_cnt=0x00;
mi_cnt=0x00;
ho_cnt=0x00;

Adjust_Pout_Flag=0x00;

nop_index=0x00;

discharge_index=0x01;

charge_index=0x00;


bt_00_hv = b_v;

eeprom_write((0x12+4*( (today_index+8-0)%8 )+0),(unsigned char)(bt_00_hv/256));

eeprom_write((0x12+4*( (today_index+8-0)%8 )+1),(unsigned char)bt_00_hv);

eeprom_write((0x12+4*( (today_index+8-0)%8 )+2),(unsigned char)(bt_00_lv/256));

eeprom_write((0x12+4*( (today_index+8-0)%8 )+3),(unsigned char)bt_00_lv);



}

break;

default:break;

}


}


void Mppt_Charge(void)
{

if((battery_voltage_value<dianchi_guoya_huifu)&&(charge_index==0x03))
{

if(mppt_status==0x00)
{
if (charge_current_value>=I_prev)
{

buck_pwm_value=buck_pwm_value + 200 * 0.025;

if(buck_pwm_value>=900)
{
buck_pwm_value=900;
}

Set_Buck_Pwm_Duty(buck_pwm_value);

}
else
{
mppt_status=1;

buck_pwm_value=buck_pwm_value - 200 * 0.025;

if(buck_pwm_value<=50)
{
buck_pwm_value=50;

mppt_status=0;
}

Set_Buck_Pwm_Duty(buck_pwm_value);

}
}
else
{
if (charge_current_value>=I_prev)
{

buck_pwm_value=buck_pwm_value-200 * 0.025;

if(buck_pwm_value<=50)
{
buck_pwm_value=50;

mppt_status=0;
}

Set_Buck_Pwm_Duty(buck_pwm_value);



}
else
{
mppt_status=0;

buck_pwm_value=buck_pwm_value+ 200 * 0.025;

if(buck_pwm_value>=900)
{
buck_pwm_value=900;
}

Set_Buck_Pwm_Duty(buck_pwm_value);

}



}

PWM = buck_pwm_value;

cv_level_time_count=0x00;

}
else if((battery_voltage_value>=dianchi_cv_level)&&(battery_voltage_value<dianchi_guoya_baohu)&&(charge_index==0x03))
{
cv_level_time_count++;

if(cv_level_time_count>=100)
{
cv_level_time_count=0x00;

charge_index=0x04;

PWM = buck_pwm_value;
}
}
else if( (battery_voltage_value<dianchi_guoya_baohu) && (charge_index==0x04) )
{
pid_index = 0x02;

PWM_I=pid_calc(&PID_CV_charge,battery_voltage_value);

PWM = PWM+PWM_I;

if( PWM>=900)
{
PWM=900;
}
else if(PWM<=50)
{
PWM=50;
}
buck_pwm_value = (unsigned int)PWM;

Set_Buck_Pwm_Duty(buck_pwm_value);
}
else NOP();

}



void CC_CV_Charge(void)
{

if((battery_voltage_value<=dianchi_guoya_huifu)&&(charge_index==0x03))
{
PWM_I=pid_calc(&PID_CC_charge,charge_current_value);

PWM = PWM+PWM_I;

if( PWM>=900)
{
PWM=900;
}
else if(PWM<=50)
{
PWM=50;
}

# 1478
buck_pwm_value = (unsigned int)PWM;


Set_Buck_Pwm_Duty(buck_pwm_value);


}
else if((battery_voltage_value>=dianchi_cv_level)&&(battery_voltage_value<dianchi_guoya_baohu)&&(charge_index==0x03))
{
charge_index=0x04;

PWM = buck_pwm_value;
}
else if((battery_voltage_value>=dianchi_guoya_huifu)&&(battery_voltage_value<dianchi_guoya_baohu)&&(charge_index==0x04))
{
PWM_I=pid_calc(&PID_CV_charge,battery_voltage_value);

PWM = PWM+PWM_I;

if( PWM>=900)
{
PWM=900;
}
else if(PWM<=50)
{
PWM=50;
}
buck_pwm_value = PWM;

Set_Buck_Pwm_Duty(buck_pwm_value);
}
else NOP();

# 1516
}
